<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="inStoreMapper">

	<resultMap id="productResult" type="Product">
	  	<result column="pno" property="productNo"/>
	  	<result column="mno" property="memberNo"/>
	  	<result column="category" property="category"/>
	  	<result column="title" property="title"/>
	  	<result column="price" property="price"/>
	  	<result column="stock" property="stock"/>
	  	<result column="endate" property="enDate"/>
	  	<result column="courier" property="courier"/>
	  	<result column="soldout_yn" property="soldoutYN"/>
	  	<result column="status" property="status"/>
	  	<result column="img1" property="productImg0"/>
	  	<result column="img2" property="productImg1"/>
	  	<result column="img3" property="productImg2"/>
	 	<result column="img4" property="productImg3"/>
		<result column="star_avg" property="starAvg"/>
	</resultMap>
	
	<resultMap id="productOptionResult" type="ProductOption">
		<result column="opno" property="optionNo"/>
		<result column="pno" property="productNo"/>
		<result column="opname" property="optionName"/>
		<result column="price" property="price"/>
	</resultMap>
	
	<resultMap id="stockResult" type="Stock">
		<result column="pno" property="productNo" />
		<result column="title" property="productName" />
		<result column="stock" property="stockCount"/>
		<result column="orderCount" property="orderCount"/>
		<result column="soldout_yn" property="soldout"/>
		<result column="invalue" property="inValue" />
	</resultMap>
	
	<resultMap type="InProductOrder" id="pOrderResult">
		<result column="order_no" property="orderNo" />
		<result column="pno" property="productNo" />
		<result column="title" property="title"/>
		<result column="stock" property="stock"/>
		<result column="quantity" property="quantity"/>
		<result column="unit_price" property="unitPrice"/>
		<result column="total" property="total"/>
		<result column="order_site" property="orderSite"/>
		<result column="process" property="process"/>	
	</resultMap>
	
	<resultMap type="StoreOrder" id="storeOrderResult">
		<!-- pay table -->
		<result column="order_no" property="orderNo" />
		<result column="mno" property="memNo" />
		<result column="phone" property="phone" />
		<result column="address" property="address" />
		<result column="pay_amount" property="payAmount" />
		<result column="pay_date" property="payDate" />
		<result column="pay_method" property="payMethod" />
		<result column="order_status" property="orderStatus" />
		<result column="pay_status" property="payStatus" />
		<result column="deposit_ck" property="depositCK" />
		<result column="use_point" property="usePoint" />
		<result column="use_coupon" property="useCoupon" />
		<result column="point" property="point" />
		<result column="dfee" property="delFee" />
		
		<!-- s_buylist table -->
		<result column="pno" property="productNo" />
		<result column="opno" property="optionNo" />
		<result column="quantity" property="quantity" />
		<result column="price" property="price" />
		
		<!-- s_refund -->
		<result column="refund_no" property="refundNo" />
		<result column="refund_date" property="refundDate" />
		<result column="refund_status" property="refundStatus" />
		
		<!-- additional columns -->
		<result column="user_id" property="userId"/>
		<result column="user_name" property="userName"/>
	</resultMap>
	
	<resultMap type="StoreBuyList" id="buyListResult">
		<result column="order_no" property="orderNo" />
 		<result column="pno" property="productNo" />
		<result column="opno" property="optionNo" />
		<result column="quantity" property="quantity" />
		<result column="price" property="price" />
		<result column="title" property="title" />
	</resultMap>
	
	<resultMap id="reviewResult" type="StoreReview">
		<result column="rno" property="reviewNo"/>
		<result column="mno" property="memberNo"/>
		<result column="nickname" property="nickname"/>
		<result column="pno" property="productNo"/>
		<result column="content" property="content"/>
		<result column="star_rating" property="starRating"/>
		<result column="review_date" property="reviewDate"/>
		<result column="total" property="totalCount"/>
		<result column="star_avg" property="starAvg"/>
		<result column="file_path" property="img"/>
	</resultMap>
	
	<resultMap id="qnaResult" type="StoreQna">
		<result column="cs_qno" property="csQno"/>
		<result column="mno" property="memNo"/>
		<result column="gb_no" property="gbNo"/>
		<result column="refer_no" property="referNo"/>
		<result column="title" property="title"/>
		<result column="content" property="content"/>
		<result column="create_date" property="createDate"/>
		<result column="pwd" property="pwd"/>
		<result column="filepath" property="filePath"/>
		<result column="status" property="status"/>
		<result column="answer_content" property="answerContent"/>
		<result column="answer_date" property="answerDate"/>
		
		<result column="user_id" property="userId"/>
		<result column="p_title" property="productName"/>
	</resultMap>
	
	<select id="selectListCount" resultType="_int">
		select
		       count(*)
		  from store
		 where status in ('Y', 'N')
	</select>
	
	<select id="selectList" resultMap="productResult" >
	 	select pno
		     , mno
		     , category
		     , title
		     , price
		     , status
		     , img1
		 from store
		where status in ('Y','N')
		order
		    by pno desc
	</select>
	  	
  	<insert id="insertProduct">
  		insert 
		  into STORE
		     (
		       pno
		     , mno
		     , category
		     , title
		     , price
		     , stock
		     , endate
		     , courier
		     , soldout_yn
		     , status
		     , img1
		     , img2
		     , img3
		     , img4
		     )
		 VALUES
		    (
		      SEQ_SNO.NEXTVAL
		    , #{memberNo}
		    , #{category}
		    , #{title}
		    , #{price}
		    , #{stock}
		    , sysdate
		    , #{courier}
		    , 'N'
		    , 'N'
		    , #{productImg0}
		    , #{productImg1}
		    , #{productImg2}
		    , #{productImg3}
		    ) 
  	</insert>
  	
  	<insert id="insertProductOption">
  		insert 
		  into SOPTION
		     (
		       opno
		     , pno
		     , opname
		     , price
		     )
		 VALUES
		    (
		      SEQ_OPNO.NEXTVAL
		    , SEQ_SNO.CURRVAL
		    , #{optionName}
		    , #{price}
		    )
  	</insert>
  	
	<select id="selectProduct" resultMap="productResult">
  		select 
		       pno
		     , mno
		     , category
		     , title
		     , price
		     , stock
		     , to_char(endate, 'YYYY-MM-DD') endate
		     , courier
		     , soldout_yn
		     , status
		     , img1
		     , img2
		     , img3
		     , img4
		  from store
		 where pno = #{pno}
  	</select>
  	
  	<select id="selectProductOption" resultMap="productOptionResult">
	  	select 
		       opno
		     , pno
		     , opname
		     , price
		  from soption
		 where pno = #{productNo}
  	</select>
  	
  	<update id="updateProduct">
  		update store
		   set  category = #{category}
		      , title = #{title}
		      , price = #{price}
		      , courier = #{courier}
		      , img1 = #{productImg0}
		      , img2 = #{productImg1}
		      , img3 = #{productImg2}
		      , img4 = #{productImg3}
		 where pno = #{productNo}
  	</update>
  	
  	<update id="updateProductOption">
  		update soption
		   set  opname = #{optionName}
		      , price = #{price}
		 where opno = #{optionNo}
  	</update>
  	
  	<insert id="upinsertProductOption">
  		insert 
		  into SOPTION
		     (
		       opno
		     , pno
		     , opname
		     , price
		     )
		 VALUES
		    (
		      SEQ_OPNO.NEXTVAL
		    , #{productNo}
		    , #{optionName}
		    , #{price}
		    )
  	</insert>
  	
  	<update id="deleteProduct">
  		update store
		   set status = 'D'
		 where pno = #{pno}
  	</update>
  	
  	<delete id="deleteProductOption">
  		delete 
		  from soption 
		 where pno = #{pno} 
  	</delete>
  	
  	<select id="selectStockCount" resultType="_int">
		select
		       count(*)
		  from store
		 where status = 'Y'
	</select>
	
	<select id="selectStockList" resultMap="stockResult">
		select 
		       store.pno
		     , title
		     , stock
		     , nvl(a.ordercount, 0) orderCount
		     , soldout_YN
		  from store
		 left join 
		      (
		        select 
		                pno
		              , count(*) orderCount
		          from 
		              (
		                select 
		                       pay.order_no
		                     , s.pno
		                     , title
		                  from pay
		                  left join s_buylist s on (pay.order_no = s.order_no)
		                  join store on s.pno = store.pno
		                 where pay.order_status in (1,2)
		              ) a
		          group by pno
		      ) a on a.pno = store.pno
		  where status = 'Y'
		  order
		    by pno desc
	</select>
  	
  	<update id="updateStockCount">
  		update store
		   set stock = stock+#{inValue} 
		     , soldout_yn = #{soldout}
		 where pno = #{productNo}
  	</update>
  	
  	<select id="selectProductList" resultMap="productResult">
  		select
		       pno
		     , title
		     , stock
		  from store
		 where status = 'Y'
		 order
		    by pno desc
  	</select>
  	
  	<insert id="insertProductOrder">
  		insert 
		  into s_order
		      (
		        order_no
		      , pno
		      , title
		      , stock
		      , quantity
		      , unit_price
		      , total
		      , order_site
		      )
		 values
		      (
		        SEQ_SIONO.nextval
		      , #{productNo}
		      , #{title}
		      , #{stock}
		      , #{quantity}
		      , #{unitPrice}
		      , #{total}
		      , #{orderSite}
		      )
  	</insert>
  	
  	<!-- 주문조회 관련 sql -->
  	<select id="selectStoreDeliveryCount" resultType="_int">
  		select count(*)
 		  from pay
  	</select>
  	
  	<select id="selectStoreDeliveryList" resultMap="storeOrderResult">
	  	select 
		      order_no
		    , mno
		    , user_id
		    , to_char(pay_date, 'YYYY-MM-DD HH24:MI:SS') pay_date
		    , pay_method
		    , pay_amount
		    , order_status
		 from pay
		 join member using (mno)
		 order by pay_date desc
  	</select>
  	
  	<select id="selectStoreDelivery" resultMap="storeOrderResult">
  		select
		       order_no
		     , mno
		     , user_name
		     , address
		     , phone
   		     , pay_method
		     , pay_amount
		     , to_char(pay_date, 'YYYY-MM-DD HH24:MI:SS') pay_date
		     , pay_method
		     , order_status
		     , pay_status
		     , deposit_ck
		     , use_point
		     , use_coupon
		     , pay.point
		     , d_fee
		     , to_char(REFUND_DATE, 'YYYY-MM-DD HH24:MI:SS') REFUND_DATE
		     , REFUND_NO
		     , REFUND_STATUS
		 from pay
		left join s_refund using (order_no)
		join member using(mno)
		where order_no = #{ono}
  	</select>
  	
  	<select id="selectStoreBuyList" resultMap="buyListResult">
		select 
		       order_no
		     , pno
		     , title
		     , opno
		     , quantity
		     , s.price
		 from s_buylist s 
		 join store using (pno)
		 where order_no = ${ono}
	</select>
	
	<update id="storeOrderUpdate">
		update pay
		   set order_status = #{orderStatus}
		 where order_no = #{orderNo}
	</update>
	
	<select id="searchStoreOrderCount" resultType="_int">
		select count(*)
  		  from pay
		 where order_status = #{orderStatus}
	</select>
	
	<select id="searchStoreOrderList" resultMap="storeOrderResult">
		select 
		      order_no
		    , mno
		    , user_id
		    , to_char(pay_date, 'YYYY-MM-DD HH24:MI:SS') pay_date
		    , pay_method
		    , pay_amount
		    , order_status
		 from pay
		 join member using (mno)
		 where order_status = #{orderStatus}
		 order by pay_date desc
	</select>
	
	<delete id="deleteStoreOrder">
		delete 
		  from pay 
		 where order_no = #{storeNo}
	</delete>
	
	<select id="searchKeyStoreOrderCount" resultType="_int">
		select count(*)
		  from pay
		  join member using (mno)
		  <choose>
		  	<when test="type == 1">
		  		where user_id like '%'|| #{key} ||'%'
		  	</when>
		  	<when test="type == 2">
		  		where order_no like '%'|| #{key} ||'%'
		  	</when>
		  </choose>
	</select>
	
	<select id="searchKeyStoreOrderList" resultMap="storeOrderResult">
		select 
		      order_no
		    , mno
		    , user_id
		    , to_char(pay_date, 'YYYY-MM-DD HH24:MI:SS') pay_date
		    , pay_method
		    , pay_amount
		    , order_status
		 from pay
		 join member using (mno)
		 <choose>
		  	<when test="type == 1">
		  		where user_id like '%'|| #{key} ||'%'
		  	</when>
		  	<when test="type == 2">
		  		where order_no like '%'|| #{key} ||'%'
		  	</when>
		  </choose>
		  order by pay_date desc
	</select>
	
	<select id="selectStoreReviewCount" resultType="_int">
		select count(*)
  		  from s_review
	</select>
	
	<select id="selectReviewProductList" resultMap="productResult">
		select
		       pno
		     , title
		     , round(avg(star_rating),1) as star_avg
		  from store s
		  join s_review using (pno)
		 where s.mno = #{userNo}
		 group by pno, title
	</select>
	
	<!-- 전체 리뷰리스트 조회 -->
	<select id="selectStoreReviewList" resultMap="reviewResult">
		select
		        rno
		      , mno
		      , nickname
		      , pno
		      , content
		      , star_rating
		      , review_date
		      , status 
		      , file_path
		  from s_review
		  left join r_file using (rno)
	      left join member using(mno)
		 where status = 'Y'
		 order by rno desc
	</select>
	
	<select id="selectStoreProductReview" resultMap="reviewResult">
		select
		        rno
		      , mno
		      , nickname
		      , pno
		      , content
		      , star_rating
		      , review_date
		      , status 
		      , file_path
		  from s_review
		  left join r_file using (rno)
	      left join member using(mno)
		 where status = 'Y'
		 <if test="pno != 0">
		   and pno = #{pno}		 
		 </if>
		 order by rno desc
	</select>
	
	<select id="selectStoreProductReviewCount" resultMap="reviewResult">
		<choose>
			<when test="pno != 0">
			select
			       pno
			     , count(*) as total
			     , round(avg(star_rating),1) as star_avg
			  from s_review
			  group by pno
		     having pno = #{pno}	
			</when>
			<when test="pno == 0">
				select
				       
				      count(*) as total
				     , round(avg(star_rating),1) as star_avg
				  from s_review				
			</when>
		</choose>
	</select>
	
	<select id="selectStoreQnaCount" resultType="_int">
		select 
		       count(*)
		  from cs_qna
		 where gb_no = 2
	</select>
	
	<select id="selectStoreQnaList" resultMap="qnaResult">
		select 
		       cs_qno
		     , mno
		     , user_id
		     , refer_no
		     , title
		     , content
		     , to_char(create_date, 'YYYY/MM/DD HH24:MM:SS') create_date
		     , pwd
		     , filepath
		     , user_id
		     , answer_date
		  from cs_qna
		  join member using (mno)
		 where gb_no = 2
		 order by cs_qno desc
	</select>
	
	<select id="selectStoreProductQnaCount" resultType="_int">
		select 
		       count(*)
		  from cs_qna	
		 where gb_no = 2
		 <if test="pno != 0">
		  	and refer_no = #{pno}
		 </if>		
	</select>
	
	<select id="selectStoreProductQnaList" resultMap="qnaResult">
		select 
		       cs_qno
		     , mno
		     , user_id
		     , refer_no
		     , title
		     , content
		     , to_char(create_date, 'YYYY/MM/DD HH24:MM:SS') create_date
		     , pwd
		     , filepath
		     , user_id
		     , answer_date
		  from cs_qna
		  join member using (mno)
		 where gb_no = 2
		 <if test="pno != 0">
		  	and refer_no = #{pno}
		 </if>
		 order by cs_qno desc
	</select>
	
	<select id="selectStoreQnaDetail" resultMap="qnaResult">
		select 
		       cs_qno
		     , c.mno
		     , user_id
		     , refer_no
		     , store.title as p_title
		     , c.title
		     , c.content
		     , to_char(create_date, 'YYYY/MM/DD HH24:MM:SS') create_date
		     , pwd
		     , filepath
		     , user_id
		     , answer_content
		     , to_char(answer_date, 'YYYY/MM/DD HH24:MM:SS') answer_date
		  from cs_qna c
		  join member on member.mno = c.mno
		  join store on store.pno = c.refer_no
		 where gb_no = 2
		   and cs_qno = #{qno}
	</select>
	
	
	
	
</mapper>
