<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//E" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="adMemMapper">

	<resultMap type="Member" id="memberResult">
		<result column="mno" property="memNo" />
	    <result column="user_id" property="userId" />
        <result column="user_pwd" property="userPwd" />
        <result column="user_name" property="userName" />
        <result column="nickname" property="nickName" />
        <result column="phone" property="phone" />
        <result column="profile" property="profileImg" />
        <result column="point" property="point" />
        <result column="grade" property="grade" />
        <result column="u_status" property="userStatus" />
        <result column="report" property="report" />
        <result column="enroll_date" property="enrollDate" />
        <result column="sleep_date" property="sleepDate" />
        <result column="escape_date" property="escapeDate" />		
	</resultMap>

	<resultMap type="Point" id="pointResult">
		<result column="pno" property="pointNo" />
	    <result column="mno" property="memNo" />
        <result column="type" property="type" />
        <result column="p_order_no" property="orderNo" />
        <result column="p_date" property="pointDate" />		
		<result column="p_price" property="pointPrice" />	
		<result column="reason" property="reason" />	
		<result column="deadline" property="deadLine" />	
		
		<result column="user_id" property="userId"/>
		<result column="user_name" property="userName"/>
	</resultMap>	
	
	<resultMap type="Coupon" id="couponResult">
		<result column="cno" property="couponNo" />
		<result column="mno" property="memNo" />
	    <result column="cname" property="couponName" />
        <result column="discount" property="discount" />
        <result column="dedate" property="dedate" />
        <result column="count" property="count" />
        <result column="maxcount" property="maxCount"/>
	</resultMap>	
	
	<resultMap type="MemCoupon" id="memCouponResult">
		<result column="pcno" property="memCouponNo" />
	    <result column="mno" property="memNo" />
        <result column="cno" property="couponNo" />
        <result column="use" property="useYN" />
        <result column="endate" property="enDate" />
        <result column="dedate" property="deDate" />
	</resultMap>
	
	<resultMap type="Report" id="reportResult">
		<result column="report_no" property="reportNo"/>
		<result column="reported_mno" property="reportMemNo"/>
		<result column="bcategory" property="refCategory"/>
		<result column="rep_bno" property="refBNo"/>
		<result column="content" property="content"/>
		<result column="status" property="status"/>
		<result column="user_id" property="userId"/>
		<result column="rpcontent" property="rpContent"/>
	</resultMap>
	
	<resultMap type="StoreOrder" id="storeOrderResult">
		<!-- pay table -->
		<result column="order_no" property="orderNo" />
		<result column="mno" property="memNo" />
		<result column="phone" property="phone" />
		<result column="address" property="address" />
		<result column="pay_amount" property="payAmount" />
		<result column="pay_date" property="payDate" />
		<result column="pay_method" property="payMethod" />
		<result column="order_status" property="orderStatus" />
		<result column="pay_status" property="payStatus" />
		<result column="deposit_ck" property="depositCK" />
		<result column="use_point" property="usePoint" />
		<result column="use_coupon" property="useCoupon" />
		<result column="point" property="point" />
		<result column="dfee" property="delFee" />
		
		<!-- s_buylist table -->
		<result column="pno" property="productNo" />
		<result column="opno" property="optionNo" />
		<result column="quantity" property="quantity" />
		<result column="price" property="price" />
		
		<!-- s_refund -->
		<result column="refund_no" property="refundNo" />
		<result column="refund_date" property="refundDate" />
		<result column="refund_status" property="refundStatus" />
		
		<!-- additional columns -->
		<result column="user_id" property="userId"/>
		<result column="user_name" property="userName"/>
	</resultMap>
	
	<resultMap type="StoreBuyList" id="buyListResult">
		<result column="order_no" property="orderNo" />
 		<result column="pno" property="productNo" />
		<result column="opno" property="optionNo" />
		<result column="quantity" property="quantity" />
		<result column="price" property="price" />
		<result column="title" property="title" />
	</resultMap>
	
	<resultMap type="StoreRefund" id="refundResult">
		<result column="refund_no" property="refundNo" />
		<result column="order_no" property="orderNo" />
		<result column="refund" property="refund" />
		<result column="refund_date" property="refundDate"/>
		<result column="refund_status" property="refundStatus" />
		<result column="user_id" property="userId" />
		<result column="rpcontent" property="rpContent" />
	</resultMap>
	
	<resultMap type="ClassOrder" id="classOrderResult">
		<result column="c_ono" property="coNo"/>
		<result column="clno" property="clNo"/>
		<result column="mno" property="memNo"/>
		<result column="price" property="price"/>
		<result column="point_use" property="pointUse"/>
		<result column="pcno" property="pcNo"/>
		<result column="amount" property="amount"/>
		<result column="payment_date" property="paymentDate"/>
		<result column="payment_option" property="paymentOption"/>
		<result column="deposit" property="deposit"/>
		<result column="point_save" property="pointSave"/>
		<result column="reading_check" property="readingCheck"/>
		
		<result column="user_id" property="userId"/>
		<result column="user_name" property="userName"/>
		<!-- 환불관련 정보 -->
		<result column="request_date" property="requestDate"/>
		<result column="cl_name" property="clName"/>
		<result column="cl_price" property="clPrice"/>
		<result column="phone" property="phone"/>
	</resultMap>
	
	<resultMap type="ClassRefund" id="classRefundResult">
		<result column="c_refundno" property="clRefundNo"/>
		<result column="c_ono" property="coNo"/>
		<result column="reason" property="reason"/>
		<result column="request_date" property="requestDate"/>
		<result column="status" property="status"/>	
	</resultMap>
	
	<select id="loginAdmin" resultMap="memberResult">
		select
			  	mno
		      , user_id
		      , user_pwd
		      , user_name
		      , nickname
		      , phone
		      , profile
		      , point
		      , u_status
		      , to_char(enroll_date, 'YYYY-MM-DD') enroll_date
		      , sleep_date
		      , escape_date
		  from member
		 where u_status = 'Y'
		   and grade = 'A'
		   and user_id = #{userId}
	</select>	
	
	<!-- 전체회원 수 조회 -->
	<select id="selectMemCount" resultType="_int">
		select
		       count(*)
		  from member
		 where u_status = 'Y'
		   and grade in ('S', 'T')  
	</select>
	
	<!-- 전체회원 목록 조회 -->
	<select id="selectMemList" resultMap="memberResult">
		select
			  	mno
		      , user_id
		      , user_name
		      , nickname
		      , phone
		      , grade
		      , enroll_date
		  from member
		 where u_status = 'Y'
		 order
		    by mno desc
	</select>
	
	<!-- 학생 회원 수 조회 -->
	<select id="selectSearchMemCount" resultType="_int">
		select
		       count(*)
		  from member
		 where u_status = 'Y'<!--  -->
		   and grade = #{type}
		   <if test="key != null">
		   and user_name like '%' || #{key} || '%'
		   </if>
	</select>
	
	<!-- 학생회원 목록 조회 -->
	<select id="selectSearchMemList" resultMap="memberResult">
		select
			  	mno
		      , user_id
		      , user_name
		      , nickname
		      , phone
		      , grade
		      , enroll_date
		  from member
		 where u_status = 'Y'
		   and grade = #{type}
		   <if test="key != null">
		   and user_name like '%' || #{key} || '%'
		   </if>
		 order
		    by mno desc
	</select>
	
	<!-- 강사 회원수 조회 -->
	<select id="selectTMemCount" resultType="_int">
			select
			       count(*)
			  from member
			 where u_status = 'Y'
			   and grade = 'T'
	</select>
	
	<!-- 강사목록 조회 -->
	<select id="selectTMemList" resultMap="memberResult">
		select
			  	mno
		      , user_id
		      , user_name
		      , nickname
		      , phone
		      , grade
		      , enroll_date
		  from member
		 where u_status = 'Y'
		   and grade = 'T'
		 order
		    by mno desc
	</select>
	
	<!-- 포인트 목록 카운트 -->
	<select id="selectPointCount" resultType="_int">
		select count(*)
		 from point
		 where deadline > sysdate
	</select>
	
	<!-- 포인트 목록 조회용 -->
	<select id="selectPointList" resultMap="pointResult">
		select
		       pno
		     , user_id
		     , user_name
		     , reason
		     , p_price
		     , to_char(p_date, 'YYYY-MM-DD HH24:MI:SS') p_date
		     , to_char(deadline, 'YYYY-MM-DD HH24:MI:SS') deadline
		 from point
		 join member using (mno)
		 where deadline > sysdate
		 order by pno desc
	</select>
	
	<!-- 쿠폰목록 카운트 -->
	<select id="selectCouponCount" resultType="_int">
		select
		       count(*)
		  from couponlist
	</select>
	
	<!-- 쿠폰리스트 조회하기 -->
	<select id="selectCouponList" resultMap="couponResult">
		select
		       cno
		     , cname
		     , discount
		     , maxcount
		     , to_char(dedate, 'YYYY-MM-DD') as dedate
		     , NVL((select count(*)
		          from coupon
		          group by cno
		          having couponlist.cno = coupon.cno),  0) as count
		 from couponlist
		 order
		    by cno desc
	</select>
	
	<!-- 쿠폰목록 등록하기 -->
	<insert id="enrollCoupon">
		insert 
		  into COUPONLIST 
		     (
		       CNO
		     , CNAME
		     , DISCOUNT
		     , DEDATE
		     , maxcount
		     )
		values
		     (
		       SEQ_CNO.nextval
		     , #{couponName}
		     , #{discount}
		     , #{dedate}
		     , #{maxCount}
		     )
	</insert>
	
	<!-- 쿠폰 삭제하기 -->
	<delete id="deleteCoupon">
		delete 
		  from couponlist 
		 where cno = #{cno}
	</delete>
	
	<!-- 해당 쿠폰 정보 가져오기 -->
	<select id="selectCoupon" resultMap="couponResult">
		select
		       cno
		     , cname
		     , discount
		     , maxcount
		     , to_char(dedate, 'YYYY-MM-DD') as dedate
		  from couponlist
		 where cno = #{cno}
	</select>
	
	<!-- 쿠폰 지급용 양식에 보여질 memlist -->
	<select id="selectAllMember" resultMap="memberResult">
		select
			   mno
			 , user_id
			 , user_name
		  from member
		 where u_status='Y'
		   and grade = 'S'  
	</select>
	
	<!-- 멤버별 쿠폰 지급 -->
	<insert id="insertMemCoupon">
		insert  
		  into COUPON
		     (
		       pcno
		     , mno
		     , cno
		     , dedate
		     )
		values
		     (
		       SEQ_CPNO.nextval
		     , #{memNo}
		     , #{couponNo}
		     , #{deDate}
		     )
	</insert>
	
	<update id="updateCoupon">
		update COUPONLIST
		   set CNAME = #{couponName}
		     , discount = #{discount}
		     , MAXCOUNT = #{maxCount}
		     , DEDATE = #{dedate}
		where CNO = #{couponNo}
	</update>
	
	<!-- 포인트 지급용  -->
	<insert id="insertPoint">
		insert 
		  into point
		      (
		         pno
		       , mno
		       , type
		       , p_price
		       , reason
		       , deadline
		      )
		 values
		      (
		        SEQ_PNO.NEXTVAL
		      , #{memNo}
		      , '1'
		      , #{pointPrice}
		      , #{reason}
		      , #{deadLine}
      )
	</insert>
	
	<!-- 포인트 검색목록 카운트 -->
	<select id="selectPointSearchCount" resultType="_int">
		select count(*)
		 from point
 		 join member using (mno)
		 where deadline > sysdate
		 <if test="key != null">
		  and user_id like '%' || #{key} || '%'
		 </if>
	</select>
	
	<!-- 쿠폰검색목록 카운트 -->
	<select id="selectCouponSearchCount" resultType="_int">
		select
		       count(*)
		  from couponlist
		  <if test="key != null">
		  where cname like '%' || #{key} || '%'
		  </if> 
	</select>
	
	<select id="selectPointSearchList" resultMap="pointResult">
		select
		       pno
		     , user_id
		     , user_name
		     , reason
		     , p_price
		     , to_char(p_date, 'YYYY-MM-DD HH24:MI:SS') p_date
		     , to_char(deadline, 'YYYY-MM-DD HH24:MI:SS') deadline
		 from point
		 join member using (mno)
		 where deadline > sysdate
		  and user_id like '%' || #{key} || '%'
		 order by pno desc
	</select>
	
	<select id="selectCouponSearchList" resultMap="couponResult">
		select
		       cno
		     , cname
		     , discount
		     , maxcount
		     , to_char(dedate, 'YYYY-MM-DD') as dedate
		     , NVL((select count(*)
		          from coupon
		          group by cno
		          having couponlist.cno = coupon.cno),  0) as count
		 from couponlist
		 <if test="key != null">
		 where cname like '%' || #{key} || '%'
		 </if>
		 order
		    by cno desc
	</select>
	
	<select id="selectClassOrderCount" resultType="_int">
		select count(*)
  		  from class_order
	</select>

	<select id="selectClassOrderList" resultMap="classOrderResult">
		select 
		       c_ono
		     , clno
		     , mno
		     , user_id
		     , user_name
		     , price
		     , payment_date
		     , payment_option
		     , request_date
	         , reading_check
		 from class_order
		left join class_refund using (c_ono)
		join member using(mno)
		order by c_ono desc
	</select>	
	
	<select id="selectStoreOrderCount" resultType="_int">
		select count(*)
  		  from pay
	</select>
	
	<select id="selectStoreOrderList" resultMap="storeOrderResult">
		select 
		       order_no
		     , mno
		     , user_id
		     , user_name
		     , pay_amount
		     , pay_date
		     , pay_method
		     , order_status
		     , refund_date
		 from pay
		left join s_refund using (order_no)
		join member using(mno)
		order by pay_date desc
	</select>
	
	<delete id="deleteStoreOrder">
		delete 
		  from pay 
		 where order_no = #{storeNo}
	</delete>
	
	<select id="selectStoreOrder" resultMap="storeOrderResult">
		select
		       order_no
		     , mno
		     , user_name
		     , address
		     , phone
		     , pay_amount
		     , to_char(pay_date, 'YYYY-MM-DD HH24:MI:SS') pay_date
		     , pay_method
		     , order_status
		     , pay_status
		     , deposit_ck
		     , use_point
		     , use_coupon
		     , pay.point
		     , d_fee
		     , to_char(REFUND_DATE, 'YYYY-MM-DD HH24:MI:SS') REFUND_DATE
		     , REFUND_NO
		     , REFUND_STATUS
		 from pay
		left join s_refund using (order_no)
		join member using(mno)
		where order_no = #{sOrderNo}
	</select>
	
	<select id="selectClassOrder" resultMap="classOrderResult">
		select
		       c_ono
		     , clno
		     , user_id
		     , user_name
		     , price
		     , point_use
		     , pcno
		     , amount
		     , to_char(payment_date, 'YYYY-MM-DD HH24:MI:SS') payment_date
		     , payment_option
		     , deposit
		     , point_save
		     , reading_check
		     , c_refundno
		     , to_char(request_date, 'YYYY-MM-DD HH24:MI:SS') request_date
		     , cl_name
		     , cl_price
		     , phone
		 from class_order c
		 left join class_refund using (c_ono)
		join member using(mno)
		join class using(clno)
		where c_ono = #{classNo}
	</select>
	
	<select id="selectStoreBuyList" resultMap="buyListResult">
		select 
		       order_no
		     , pno
		     , title
		     , opno
		     , quantity
		     , s.price
		 from s_buylist s 
		 join store using (pno)
		 where order_no = ${sOrderNo}
	</select>
	
	<insert id="insertStoreRefund">    
		insert
		  into s_refund
		      (
		        refund_no
		      , order_no
		      , refund
		      , refund_date
		      , refund_status
		      )
		 values
		       (
		         SEQ_SREFUNDNO.nextval
		       , #{orderNo}
		       , #{refund}
		       , sysdate
		       , 2
		       )
	</insert>
	
	<update id="updateStoreOrderCancle">
		update pay
		   set order_status = 6
		 where order_no = #{orderNo}
	</update>
	
	<update id="upadteOrderStatus">
		update pay
		   set order_status = #{orderStatus}
		 where order_no = #{orderNo}
	</update>
	
	<insert id="insertClassRefund">    
		insert
		  into class_refund
		      (
		        c_refundno
		      , c_ono
		      , reason
		      , request_date
		      , status
		      )
		 values
		       (
		         SEQ_CREFUNDNO.nextval
		       , #{coNo}
		       , #{reason}
		       , sysdate
		       , 2
		       )
	</insert>

	<select id="selectSearchClassCount" resultType="_int">
		select count(*)
		 from class_order
		 join member on member.mno = class_order.mno
		where payment_date between TO_DATE(#{sDate},'YYYY/MM/DD') and TO_DATE(#{eDate},'YYYY/MM/DD')
  		  and c_ono like '%' || #{key} || '%'
	</select>
	
	<select id="selectSearchClassList" resultMap="classOrderResult">
		select 
		       c_ono
		     , clno
		     , mno
		     , user_id
		     , user_name
		     , price
		     , payment_date
		     , payment_option
		     , request_date
		     , reading_check
		 from class_order
		 left join class_refund using (c_ono)
		 join member using(mno)
		where payment_date between TO_DATE(#{sDate},'YYYY/MM/DD') and TO_DATE(#{eDate},'YYYY/MM/DD')
  		  and c_ono like '%' || #{key} || '%'
		order by payment_date desc		 
	</select>
	
	<select id="selectSearchStoreCount" resultType="_int">
		select count(*)
		  from pay
		  join member using (mno)
		where pay_date between TO_DATE(#{sDate},'YYYY/MM/DD') and TO_DATE(#{eDate},'YYYY/MM/DD')
		  and order_no like '%' || #{key} || '%'
	</select>
	
	<select id="selectSearchStoreList" resultMap="storeOrderResult">
		select 
		       order_no
		     , mno
		     , user_id
		     , user_name
		     , pay_amount
		     , pay_date
		     , pay_method
		     , order_status
		     , refund_date
		  from pay
		left join s_refund using (order_no)
		join member using(mno)
		where pay_date between TO_DATE(#{sDate},'YYYY/MM/DD') and TO_DATE(#{eDate},'YYYY/MM/DD')
		  and order_no like '%' || #{key} || '%'
		order by pay_date desc		  
	</select>

	<select id="selectReportCount" resultType="_int">
		select count(*)
  		  from report
	</select>
	
	<select id="selectReportList" resultMap="reportResult">
		select
		        report_no
		      , reported_mno
              , user_id
		      , bcategory
		      , rep_bno
		      , content
		      , status
		  from report r
          join member m on r.reported_mno = m.mno
		 order
		    by report_no desc
	</select>
	
	<select id="selectReportStoreReview" resultMap="reportResult">
		select 
		        report_no
		      , reported_mno
		      , user_id
		      , bcategory
		      , rep_bno
		      , rp.content
		      , rp.status
		      , rv.content as rpcontent
		  from report rp
		  join s_review rv on rv.rno = rp.rep_bno
		  join member using (mno)
		  where report_no = #{reportNo}
	</select>
	
	<select id="selectReportClassReview" resultMap="reportResult">
		select
		        report_no
		      , reported_mno
    		  , user_id
		      , bcategory
		      , rep_bno
		      , rp.content
		      , rp.status
		      , rv.content as rpcontent
		  from report rp
		  join class_review rv on rv.c_rno = rp.rep_bno
		  join member using (mno)
		  where report_no = #{reportNo}
	</select>
	
	<select id="selectReportStoreQna" resultMap="reportResult">
		select
		        report_no
		      , reported_mno
		      , user_id
		      , bcategory
		      , rep_bno
		      , rp.content
		      , rp.status
		      , cs.content as rpcontent
		  from report rp
		  join cs_qna cs on cs.cs_qno = rp.rep_bno
		  join member on rp.reported_mno = member.mno
		  where report_no = #{reportNo}
		    and gb_no = 2
	</select>
	
	<select id="selectReportClassQna" resultMap="reportResult">
		select
		        report_no
		      , reported_mno
		      , user_id
		      , bcategory
		      , rep_bno
		      , rp.content
		      , rp.status
		      , cs.content as rpcontent
		  from report rp
		  join cs_qna cs on cs.cs_qno = rp.rep_bno
		  join member on rp.reported_mno = member.mno
		  where report_no = #{reportNo}
		    and gb_no = 1
	</select>
	
	<select id="selectReportReply" resultMap="reportResult">
		select
		        report_no
		      , reported_mno
		      , user_id
		      , bcategory
		      , rep_bno
		      , rp.content
		      , rp.status
		      , rv.reply_content as rpcontent
		  from report rp
		  join reply rv on rv.reply_no = rp.rep_bno
		  join member using (mno) 
		  where report_no = #{reportNo}
	</select>
	
	<select id="selectReportMem" resultMap="memberResult">
		select mno, report
		  from member
		 where mno = #{memNo}
	</select>
	
	<update id="reportCountUp">
		update member
		   set report = report + 1
		 where mno = #{memNo}
	</update>
	
	<update id="reportCountDown">
		update member
		<choose>
			<when test="report>0">
			set report = report -1
			</when>
			<otherwise>
			set report = 0
			</otherwise>
		</choose>
		where mno = #{mno}
	</update>
	
	<update id="adminReportDelete">
		update report
		  set status = 'Y'
		where report_no = #{reportNo}
	</update>
	
	<update id="adminReportRollback">
		update report
		  set status = 'B'
		where report_no = #{reportNo}
	</update>
	
	<select id="selectBlackListCount"  resultType="_int">
		select count(*)
		  from member
		 where report > 2
	</select>
	
	<select id="selectReportMemList" resultMap="memberResult">
		select mno
		     , user_id
		     , nickname
		     , user_name
		     , report
		     , u_status
		  from member
		 where report > 2
		 order by mno desc
	</select>
	
	<update id="updateBlackMemBack">
		update member
		   set u_status = 'Y'
		      ,report = 0
		 where mno = #{mno}
	</update>
	
	<update id="updateBlackMemOut">
		update member
		   set u_status = 'N'
		 where mno = #{mno}
	</update>
	
	<!-- 검색조건 : status(필수선택),  key-->
	<select id="selectReportSearchCount" resultType="_int">
		select count(*)
		 from report 
		 join member on member.mno = report.reported_mno
		 where report.status = #{status}
		<if test="sDate!=null and eDate!=null">
			 and report_date between TO_DATE(#{sDate},'YYYY/MM/DD') and TO_DATE(#{eDate},'YYYY/MM/DD')
		</if>
		<if test="key != null">
			and user_id like '%' || #{key} || '%'
		</if>
	</select>
	
	<select id="selectReportSearchList" resultMap="reportResult">
		select
		        report_no
		      , reported_mno
		      , user_id
		      , bcategory
		      , rep_bno
		      , rp.content
		      , rp.status
		      , rv.content as rpcontent
		  from report rp
		  join class_review rv on rv.c_rno = rp.rep_bno
		  join member using (mno)
		 where rp.status = #{status}
		<if test="sDate!=null and eDate!=null">
			 and report_date between TO_DATE(#{sDate},'YYYY/MM/DD') and TO_DATE(#{eDate},'YYYY/MM/DD')
		</if>
		<if test="key != null">
			and user_id like '%' || #{key} || '%'
		</if>
	</select>
	
	
	
	
	
</mapper>
